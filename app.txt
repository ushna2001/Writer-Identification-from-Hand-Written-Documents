from flask import render_template, Flask, request
from transformers import ViTForImageClassification
import torch
from PIL import Image
import torchvision.transforms as transforms
import os
from werkzeug.utils import secure_filename

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

app = Flask(__name__)

model_path = './static/models/v1/'  # Update with the path to your saved model
model = ViTForImageClassification.from_pretrained(model_path).to(device)

UPLOAD_FOLDER = './static/uploaded_images'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

last_uploaded_file_path = None

@app.route('/upload_image', methods=['POST'])
def upload_image():
    global last_uploaded_file_path

    if 'file' not in request.files:
        return 'No file part'
    file = request.files['file']
    if file.filename == '':
        return 'No selected file'
    if file:
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Store the path of the uploaded file
        last_uploaded_file_path = filepath
        return f'File uploaded successfully to {filepath}. You can now click on "Identify Writer".'
        
    return 'File upload failed'

@app.route('/identify_writer', methods=['POST'])
def identify_writer():
    global last_uploaded_file_path

    if last_uploaded_file_path:
        prediction = predict(last_uploaded_file_path)
        return f'Prediction: {prediction}'
    else:
        return 'No image uploaded yet. Please upload an image first.'

def predict(image_path):
    image = Image.open(image_path)

    # Preprocess the image
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Update with your normalization values
    ])
    input_image = transform(image)

    # Perform inference
    with torch.no_grad():
        inputs = input_image.unsqueeze(0).to(device)  # Add batch dimension
        outputs = model(inputs)
        
    predicted_class_idx = torch.argmax(outputs.logits).item()
    predicted_label = str(predicted_class_idx)  # Adjust this based on your label mapping
    return predicted_label

@app.route('/home', methods=['GET', 'POST'])
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
